# Test cases for division of matrix elements with function
# def matrix_divided(matrix, div)

"""
A function that divides all elements of a matrix
Args:
     matrix must be a list of lists of integers floats.
     div must be a number(integer or float).
   Return:
	a new matrix of the computation.
   Raises:
	TypeError: if matrix is not a list of lists(integers or floats)
	TypeError: if div is not an integer or float.
	TypeError: if row is not of the same size.
	ZeroDivisionError: if div is equal to zero.
"""

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...      [1, 2, 3],
...      [4, 5, 6]
...  ]
>>> print(matrix_divided(matrix, 3))
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


>>> matrix = [
...      [1, 2, 3],
...      [4, 5, 6]
...  ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero


>>> matrix = None
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats


>>> matrix = [
...      [1, 2, 3, 4, 5],
...      [4, 5, 6]
...  ]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size


>>> matrix = [
...      [1, 2, 3],
...      [4, 5, 6]
...  ]
>>> print(matrix_divided(matrix, 'c'))
Traceback (most recent call last):
TypeError: div must be a number

>>> matrix = []
>>> print(matrix_divided(matrix))
Traceback (most recent call last):
	  ...
TypeError: matrix_divided() missing 1 required positional argument: 'div'

>>> matrix = None
>>> print(matrix_divided())
Traceback (most recent call last):
    	  ...
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'

>>> matrix = [[]]
>>> print(matrix_divided(matrix, 4))
[[]]
